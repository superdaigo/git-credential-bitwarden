#!/usr/bin/env python3
#
# Requirements
# ============
#
# - Python3
# - Bitwarden CLI
# - Environment variable BW_SESSION
#
# Install
# =======
#
# 1. Download the script under a directory in your PATH
# 2. Change file mode to 755
# 3. Configure git credential helper
#
#    $ git config --global credential.helper 'bitwarden'
#
import json
import subprocess
import logging
import os
import socket
import sys

logger = logging.getLogger('git-credential-bitwarden')
logger.setLevel(logging.INFO)
logger.addHandler(logging.StreamHandler())


def get(params):
    """ Get credentials from Bitwarden
    """
    item = _bw_list_items(params)
    if item:
        print('protocol={}'.format(params['protocol']))
        print('host={}'.format(params['host']))
        print('username={}'.format(item['login']['username']))
        print('password={}'.format(item['login']['password']))


def store(params):
    """ Store credentials to Bitwarden
    """
    if _bw_list_items(params):
        return  # Not need to store item
    val = {
        "type": 1,
        "name": _bw_search_key(params.get('protocol'), params.get('host')),
        "login": {
            "username": params.get('username', ''),
            "password": params.get('password', '')
        }
    }
    cmd = ['bw', 'create', 'item', _bw_encode(val)]
    p = subprocess.run(cmd, stdout=subprocess.PIPE)


def erase(params):
    """ Erase password
    """
    logger.debug('erase')
    item = _bw_list_items(params)
    if item:
        item_id = item.get('id')
        cmd = ['bw', 'delete', 'item', item_id]
        p = subprocess.run(cmd)
        sys.exit(p.returncode)


def _bw_list_items(params):
    cmd = ['bw', 'list', 'items', '--search',
           _bw_search_key(params.get('protocol'), params.get('host'))]
    p = subprocess.run(cmd, stdout=subprocess.PIPE)
    logger.debug(p)
    stdout = p.stdout.decode()
    if p.returncode != 0:
        if "Failed to decrypt." in stdout:
            logger.error("Unlock your vault and set the environment variable \"BW_SESSION\"\n  $ bw unlock")
        elif "" in stdout:
            logger.error("Login to Bitwarden using the following command.\n  $ bw login")
        sys.exit(1)
    js_out = json.loads(stdout)
    for i in js_out:
        if i['name'] == _bw_search_key(params['protocol'], params['host']):
            return i
    return None


def _bw_unlock_check():
    p = subprocess.run(['bw', 'unlock', '--check'])
    if p.returncode != 0:
        logger.error("Unlock your vault and set the environment variable \"BW_SESSION\"\n  $ bw unlock")
        sys.exit(1)


def _bw_search_key(protocol, host):
    return "{}://{} - {}@{}".format(protocol, host, os.environ.get('USER'), socket.gethostname())


def _bw_encode(val):
    p = subprocess.run(['bw', 'encode'],
                       stdout=subprocess.PIPE,
                       input=json.dumps(val),
                       encoding='ascii')
    if p.stderr:
        raise Exception(p.stderr)
    return p.stdout


def _read_stdin():
    ret = {}
    for line in sys.stdin:
        k, v = line.split("=")
        ret[k] = v.strip()
    return ret

USAGE = """
Usage: git credential-bitwarden [get|store|erase]

Parameter should be passed through STDIN with key=value format.
Example)
protocol=https
host=hostname.com
username=username
password=password
"""
    
if __name__ == '__main__':
    _bw_unlock_check()
    action = sys.argv[1]
    logger.debug("action: {}".format(action))
    stdin_params = _read_stdin()
    logger.debug("stdin_parms: {}".format(stdin_params))
    if action == "get":
        get(stdin_params)
    elif action == "store":
        store(stdin_params)
    elif action == "erase":
        erase(stdin_params)
    else:
        print(USAGE)
